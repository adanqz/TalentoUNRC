// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow to suggest potential student candidates to businesses based on their skills and opportunity requirements.
 *
 * - suggestPotentialCandidates - A function that handles the suggestion process.
 * - SuggestPotentialCandidatesInput - The input type for the suggestPotentialCandidates function.
 * - SuggestPotentialCandidatesOutput - The return type for the suggestPotentialCandidates function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestPotentialCandidatesInputSchema = z.object({
  opportunityDescription: z
    .string()
    .describe('The description of the opportunity.'),
  studentSkills: z.array(z.string()).describe('The skills of the student.'),
});
export type SuggestPotentialCandidatesInput = z.infer<
  typeof SuggestPotentialCandidatesInputSchema
>;

const SuggestPotentialCandidatesOutputSchema = z.object({
  matchScore: z
    .number()
    .describe(
      'A score indicating how well the student skills match the opportunity requirements.'
    ),
  justification: z
    .string()
    .describe(
      'A justification for the match score, explaining why the student is a good fit for the opportunity.'
    ),
});
export type SuggestPotentialCandidatesOutput = z.infer<
  typeof SuggestPotentialCandidatesOutputSchema
>;

export async function suggestPotentialCandidates(
  input: SuggestPotentialCandidatesInput
): Promise<SuggestPotentialCandidatesOutput> {
  return suggestPotentialCandidatesFlow(input);
}

const suggestPotentialCandidatesPrompt = ai.definePrompt({
  name: 'suggestPotentialCandidatesPrompt',
  input: {schema: SuggestPotentialCandidatesInputSchema},
  output: {schema: SuggestPotentialCandidatesOutputSchema},
  prompt: `You are an AI assistant that helps businesses find the best student candidates for their opportunities.

You are given the opportunity description and the student skills. You must evaluate how well the student skills match the opportunity requirements and provide a match score between 0 and 1 (inclusive), and a justification for the score.

Opportunity Description: {{{opportunityDescription}}}
Student Skills: {{#each studentSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

Match Score: {{matchScore}}
Justification: {{justification}}`,
});

const suggestPotentialCandidatesFlow = ai.defineFlow(
  {
    name: 'suggestPotentialCandidatesFlow',
    inputSchema: SuggestPotentialCandidatesInputSchema,
    outputSchema: SuggestPotentialCandidatesOutputSchema,
  },
  async input => {
    const {output} = await suggestPotentialCandidatesPrompt(input);
    return output!;
  }
);
