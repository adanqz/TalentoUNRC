
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow to suggest potential student candidates to businesses based on their skills and opportunity requirements.
 *
 * - suggestPotentialCandidates - A function that handles the suggestion process.
 * - SuggestPotentialCandidatesInput - The input type for the suggestPotentialCandidates function.
 * - SuggestPotentialCandidatesOutput - The return type for the suggestPotentialCandidates function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestPotentialCandidatesInputSchema = z.object({
  opportunityDescription: z
    .string()
    .describe('La descripción de la oportunidad.'),
  studentSkills: z.array(z.string()).describe('Las habilidades del estudiante.'),
});
export type SuggestPotentialCandidatesInput = z.infer<
  typeof SuggestPotentialCandidatesInputSchema
>;

const SuggestPotentialCandidatesOutputSchema = z.object({
  matchScore: z
    .number()
    .describe(
      'Una puntuación que indica qué tan bien coinciden las habilidades del estudiante con los requisitos de la oportunidad.'
    ),
  justification: z
    .string()
    .describe(
      'Una justificación para la puntuación de coincidencia, explicando por qué el estudiante es un buen candidato para la oportunidad.'
    ),
});
export type SuggestPotentialCandidatesOutput = z.infer<
  typeof SuggestPotentialCandidatesOutputSchema
>;

export async function suggestPotentialCandidates(
  input: SuggestPotentialCandidatesInput
): Promise<SuggestPotentialCandidatesOutput> {
  return suggestPotentialCandidatesFlow(input);
}

const suggestPotentialCandidatesPrompt = ai.definePrompt({
  name: 'suggestPotentialCandidatesPrompt',
  input: {schema: SuggestPotentialCandidatesInputSchema},
  output: {schema: SuggestPotentialCandidatesOutputSchema},
  prompt: `Eres un asistente de IA que ayuda a las empresas a encontrar los mejores candidatos estudiantiles para sus oportunidades.

Se te proporciona la descripción de la oportunidad y las habilidades del estudiante. Debes evaluar qué tan bien coinciden las habilidades del estudiante con los requisitos de la oportunidad y proporcionar una puntuación de coincidencia entre 0 y 1 (inclusive), y una justificación para la puntuación.

Descripción de la Oportunidad: {{{opportunityDescription}}}
Habilidades del Estudiante: {{#each studentSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

Puntuación de Coincidencia: {{matchScore}}
Justificación: {{justification}}`,
});

const suggestPotentialCandidatesFlow = ai.defineFlow(
  {
    name: 'suggestPotentialCandidatesFlow',
    inputSchema: SuggestPotentialCandidatesInputSchema,
    outputSchema: SuggestPotentialCandidatesOutputSchema,
  },
  async input => {
    const {output} = await suggestPotentialCandidatesPrompt(input);
    return output!;
  }
);
