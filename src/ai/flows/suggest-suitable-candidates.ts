// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow to suggest student candidates whose skills align with the opportunity requirements.
 *
 * - suggestSuitableCandidates - A function that handles the suggestion process.
 * - SuggestSuitableCandidatesInput - The input type for the suggestSuitableCandidates function.
 * - SuggestSuitableCandidatesOutput - The return type for the suggestSuitableCandidates function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestSuitableCandidatesInputSchema = z.object({
  opportunityRequirements: z
    .string()
    .describe('The requirements for the opportunity.'),
  studentSkills: z.array(z.string()).describe('The skills of the student.'),
});
export type SuggestSuitableCandidatesInput = z.infer<
  typeof SuggestSuitableCandidatesInputSchema
>;

const SuggestSuitableCandidatesOutputSchema = z.object({
  suitabilityScore: z
    .number()
    .describe(
      'A score indicating how well the student skills match the opportunity requirements.'
    ),
  justification: z
    .string()
    .describe(
      'A justification for the suitability score, explaining why the student is a good fit for the opportunity.'
    ),
});
export type SuggestSuitableCandidatesOutput = z.infer<
  typeof SuggestSuitableCandidatesOutputSchema
>;

export async function suggestSuitableCandidates(
  input: SuggestSuitableCandidatesInput
): Promise<SuggestSuitableCandidatesOutput> {
  return suggestSuitableCandidatesFlow(input);
}

const suggestSuitableCandidatesPrompt = ai.definePrompt({
  name: 'suggestSuitableCandidatesPrompt',
  input: {schema: SuggestSuitableCandidatesInputSchema},
  output: {schema: SuggestSuitableCandidatesOutputSchema},
  prompt: `You are an AI assistant that helps businesses find suitable student candidates for their opportunities.

You are given the opportunity requirements and the student skills. You must evaluate how well the student skills match the opportunity requirements and provide a suitability score between 0 and 1 (inclusive), and a justification for the score.

Opportunity Requirements: {{{opportunityRequirements}}}
Student Skills: {{#each studentSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

Suitability Score: {{suitabilityScore}}
Justification: {{justification}}`,
});

const suggestSuitableCandidatesFlow = ai.defineFlow(
  {
    name: 'suggestSuitableCandidatesFlow',
    inputSchema: SuggestSuitableCandidatesInputSchema,
    outputSchema: SuggestSuitableCandidatesOutputSchema,
  },
  async input => {
    const {output} = await suggestSuitableCandidatesPrompt(input);
    return output!;
  }
);
